#!/bin/bash

# WORKING ON THIS SCRIPT :
Creating_SFile

curl -o Demo.sh https://raw.githubusercontent.com/Bibhuti1221Bhushan/Installer/Global/Demo.sh

# DNS
echo -e "[global-dns-domain-*]" >> /etc/NetworkManager/NetworkManager.conf
echo -e "servers=::1,1.1.1.1" >> /etc/NetworkManager/NetworkManager.conf
systemctl restart NetworkManager

# If the script exits for any reason, unhide the cursor.
printf "\e[?25h\e[?7h"
# Hide the cursor and disable line wrap.
printf '\e[?25l\e[?7l'



MOZ_ENABLE_WAYLAND=1
QT_QPA_PLATFORM=wayland
QT_QPA_PLATFORMTHEME=gtk2

	# Video drivers
	if [ "$VIDEO_DRIVER" = "intel" ]; then
		packages="$packages mesa intel-media-driver libva-intel-driver intel-gpu-tools"
	elif [ "$VIDEO_DRIVER" = "nouveau" ]; then
		packages="$packages xf86-video-nouveau"
	elif [ "$VIDEO_DRIVER" = "nvidia" ]; then
		packages="$packages nvidia-dkms nvidia-utils nvidia-settings"
	elif [ "$VIDEO_DRIVER" = "radeon" ]; then
		packages="$packages xf86-video-ati"
	elif [ "$VIDEO_DRIVER" = "vesa" ]; then
		packages="$packages xf86-video-vesa"
	elif [ "$VIDEO_DRIVER" = "vbox" ]; then
		packages="$packages virtualbox-guest-utils"
	fi


	if [ "$VIDEO_DRIVER" = "intel" ]; then
		echo "Configuring intel stuff"
		sed -i "s/MODULES=()/MODULES=(intel_agp i915)/g" /etc/mkinitcpio.conf
		echo "options i915 enable_guc=2 enable_fbc=1" >> /etc/modprobe.d/i915.conf
		mkinitcpio -P
	fi

# INTEL
mesa 
lib32-mesa 
vulkan-intel
lib32-vulkan-intel
libva-intel-driver 
lib32-libva-intel-driver
libva-utils 
libvdpau-va-gl 

# AMD
mesa lib32-mesa mesa-vdpau lib32-mesa-vdpau libva-mesa-driver lib32-libva-mesa-driver xf86-video-amdgpu 

# ATI
mesa 
lib32-mesa 
mesa-vdpau 
lib32-mesa-vdpau 
libva-mesa-driver
lib32-libva-mesa-driver
xf86-video-ati


# ENABLE SERVICES :
arch-chroot /mnt systemctl enable systemd-timesyncd.service &>> $LOGFILE
arch-chroot /mnt systemctl enable fstrim.timer &>> $LOGFILE
arch-chroot /mnt systemctl enable paccache.timer &>> $LOGFILE
arch-chroot /mnt systemctl enable reflector.timer &>> $LOGFILE
arch-chroot /mnt systemctl enable systemd-boot-update.service &>> $LOGFILE

# INSTALLING PACMAN KEYS :
rm -rf /etc/pacman.d/gnupg
pacman-key --init
pacman-key --populate
pacman -Sy --noconfirm --disable-download-timeout archlinux-keyring

# SET GRAPHICS DRIVER :
# ~~~~~~~~~~~~~~~~~~~~~
Setting_Graphics () {
    Spin 15 SETTING &
    PID=$!
    if
        GPU=$(lspci)
        if grep -E "NVIDIA|GeForce" <<< ${GPU}; then
            arch-chroot /mnt pacman -S --noconfirm nvidia nvidia-utils &>> $LOGFILE
        elif lspci | grep 'VGA' | grep -E "Radeon|AMD"; then
            arch-chroot /mnt pacman -S --noconfirm mesa lib32-mesa mesa-vdpau lib32-mesa-vdpau libva-mesa-driver lib32-libva-mesa-driver xf86-video-amdgpu &>> $LOGFILE
        elif grep -E "Integrated Graphics Controller" <<< ${GPU}; then
            arch-chroot /mnt pacman -S --noconfirm mesa lib32-mesa vulkan-intel lib32-vulkan-intel libva-intel-driver lib32-libva-intel-driver libva-utils libvdpau-va-gl &>> $LOGFILE
        elif grep -E "Intel Corporation UHD" <<< ${GPU}; then
            arch-chroot /mnt pacman -S --noconfirm mesa lib32-mesa vulkan-intel lib32-vulkan-intel libva-intel-driver lib32-libva-intel-driver libva-utils libvdpau-va-gl &>> $LOGFILE
        fi
    then
        sleep 1
        kill $PID
        Done_Print "SETTING GRAPHICS DRIVER."
    else
        kill $PID
        Warn_Print "SETTING GRAPHICS DRIVER."
        exit 1
    fi
}

Info_Print "SETTING GRAPHICS DRIVER."
Setting_Graphics
echo "" &>> $LOGFILE


# SET VM GUEST TOOLS :
# ~~~~~~~~~~~~~~~~~~~~
Setting_VMTools () {
    Spin 14 SETTING &
    PID=$!
    if
        VM=$(systemd-detect-virt)
        if [[ $VM == kvm ]]; then
            arch-chroot /mnt pacman -S --noconfirm qemu-guest-agent &>> $LOGFILE
            arch-chroot /mnt systemctl enable qemu-guest-agent &>> $LOGFILE
        elif [[ $VM == vmware ]]; then
            arch-chroot /mnt pacman -S --noconfirm open-vm-tools &>> $LOGFILE
            arch-chroot /mnt systemctl enable vmtoolsd &>> $LOGFILE
            arch-chroot /mnt systemctl enable vmware-vmblock-fuse &>> $LOGFILE
        elif [[ $VM == oracle ]]; then
            arch-chroot /mnt pacman -S --noconfirm virtualbox-guest-utils &>> $LOGFILE
            arch-chroot /mnt systemctl enable vboxservice &>> $LOGFILE
        elif [[ $VM == microsoft ]]; then
            arch-chroot /mnt pacman -S --noconfirm hyperv &>> $LOGFILE
            arch-chroot /mnt systemctl enable hv_fcopy_daemon &>> $LOGFILE
            arch-chroot /mnt systemctl enable hv_kvp_daemon &>> $LOGFILE
            arch-chroot /mnt systemctl enable hv_vss_daemon &>> $LOGFILE
        fi
    then
        sleep 1
        kill $PID
        Done_Print "SETTING VM GUEST TOOLS."
    else
        kill $PID
        Warn_Print "SETTING VM GUEST TOOLS."
        exit 1
    fi
}

if [[ "$VM" = "none" ]]; then
else
    Info_Print "SETTING VM GUEST TOOLS."
    Setting_VMTools
    echo
fi

# SET PLYMOUTH BOOT SPLASH :
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
Info_Print "SETTING PLYMOUTH BOOT SPLASH."
pacman -S --noconfirm plymouth
git clone
Done_Print "SETTING PLYMOUTH BOOT SPLASH."
echo


check_connection() {
  # Check if a web page is available
    if ! nc -zw1 archlinux.org 443 &> /dev/null 
    then
        echo "No Internet" ; exit 1
    fi
}


# Configuring /etc/mkinitcpio.conf.
info_print "Configuring /etc/mkinitcpio.conf."
cat > /mnt/etc/mkinitcpio.conf <<EOF
HOOKS=(systemd autodetect keyboard sd-vconsole modconf block sd-encrypt filesystems)
EOF

# ZRAM configuration.
info_print "Configuring ZRAM."
cat > /mnt/etc/systemd/zram-generator.conf <<EOF
[zram0]
zram-size = min(ram, 8192)
EOF


# Boot backup hook.
info_print "Configuring /boot backup when pacman transactions are made."
mkdir /mnt/etc/pacman.d/hooks
cat > /mnt/etc/pacman.d/hooks/50-bootbackup.hook <<EOF
[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Path
Target = usr/lib/modules/*/vmlinuz

[Action]
Depends = rsync
Description = Backing up /boot...
When = PostTransaction
Exec = /usr/bin/rsync -a --delete /boot /.bootbackup
EOF

sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& splash /' /etc/default/grub

# -------------------------------------------------------------------------
#               Enabling (and Theming) Plymouth Boot Splash
# -------------------------------------------------------------------------

PLYMOUTH_THEMES_DIR="$HOME/ArchTitus/configs/usr/share/plymouth/themes"
PLYMOUTH_THEME="arch-glow" # can grab from config later if we allow selection
mkdir -p /usr/share/plymouth/themes
echo 'Installing Plymouth theme...'
cp -rf ${PLYMOUTH_THEMES_DIR}/${PLYMOUTH_THEME} /usr/share/plymouth/themes
if  [[ $FS == "luks"]]; then
  sed -i 's/HOOKS=(base udev*/& plymouth/' /etc/mkinitcpio.conf # add plymouth after base udev
  sed -i 's/HOOKS=(base udev \(.*block\) /&plymouth-/' /etc/mkinitcpio.conf # create plymouth-encrypt after block hook
else
  sed -i 's/HOOKS=(base udev*/& plymouth/' /etc/mkinitcpio.conf # add plymouth after base udev
fi
plymouth-set-default-theme -R arch-glow # sets the theme and runs mkinitcpio
echo 'Plymouth theme installed'





    # Intel/AMD/NVIDIA drivers are not installed on virtual machines
    if [ "$hypervisor" = "none" ]; then

          if grep -Fq "$gpu_pci_id" "$DIR"/etc/nvidia_390_pci_ids; then
            DESKTOP_PACKAGES+=('nvidia-390xx' 'nvidia-390xx-utils' 'nvidia-390xx-settings')
          elif grep -Fq "$gpu_pci_id" "$DIR"/etc/nvidia_340_pci_ids; then

            DESKTOP_PACKAGES+=('xf86-video-nouveau' 'mesa')
          else
            DESKTOP_PACKAGES+=('nvidia' 'nvidia-utils' 'nvidia-settings')
          fi
        else
          DESKTOP_PACKAGES+=('xf86-video-nouveau' 'mesa')
        fi
      elif lspci | grep "VGA" | grep -q "ATI\|AMD"; then

"ATI" "Open-source ATI/AMD Radeon driver" \
"AMDGPU" "Open-source driver for the latest AMD GPUs" \
"None" "-" 3>&1 1>&2 2>&3)
        if [ "$gpu_driver" = "ATI" ]; then
          DESKTOP_PACKAGES+=('xf86-video-ati' 'mesa')
        else
          DESKTOP_PACKAGES+=('xf86-video-amdgpu' 'mesa')
        fi
      fi
    else
      dialog --title "Virtual Machine Detected" \
        --msgbox "The installer has detected a virtualized environment: \
$hypervisor\n\nAny required drivers or utilities will be \
installed for you." 7 70
      case "$hypervisor" in
        "vmware") DESKTOP_PACKAGES+=('open-vm-tools' 'xf86-video-vmware' 'xf86-input-vmmouse' 'mesa' 'gtkmm' 'gtkmm3') ;;
        "oracle") DESKTOP_PACKAGES+=('virtualbox-guest-utils' 'virtualbox-guest-dkms') ;;
        "parallels") DESKTOP_PACKAGES+=('xf86-video-vesa') ;;
        *) DESKTOP_PACKAGES+=('xf86-video-fbdev') ;;
      esac
    fi
  fi
}

# GPU-related globals
GPU_CHIPSET='Unknown'
DEFAULT_GPU_DRIVER='xf86-video-vesa'
NVIDIA_GPU_PACKAGES='
  nvidia-prime
  nvidia-settings
  nvidia-utils lib32-nvidia-utils
  nvtop
'
AMD_GPU_PACKAGES='
  vulkan-radeon lib32-vulkan-radeon
'




if [ "$hypervisor" != "none" ]; then
    if [ "$hypervisor" = "oracle" ]; then
      dialog --infobox "Enabling VirtualBox modules..." 3 50
      arch-chroot /mnt systemctl enable vboxservice.service &> /dev/null
    elif [ "$hypervisor" = "vmware" ]; then
      dialog --infobox "Enabling VMware Open-VM-Tools..." 3 50
      arch-chroot /mnt systemctl enable vmtoolsd.service &> /dev/null
      arch-chroot /mnt systemctl enable vmware-vmblock-fuse.service &> /dev/null
    fi
  fi
}






BASE_PACKAGES='
  acpi
  alsa-utils
  arch-wiki-lite
  asciiquarium
  audacious
  base-devel
  bash-completion
  breeze
  cmatrix
  cool-retro-term
  cowsay
  cpupower
  cups-pdf
  dialog
  dictd
  duf
  foliate
  fortune-mod
  figlet
  fwupd
  gamemode lib32-gamemode
  git-lfs
  gnu-netcat
  grub
  gst-libav
  gst-plugins-base
  gst-plugins-good
  gst-plugins-bad
  gst-plugins-ugly
  gufw
  gvfs-mtp
  gvfs-smb
  gvim
  hplip
  inetutils
  iputils
  jp2a
  kernel-modules-hook
  libreoffice-fresh
  licenses
  linux
  linux-firmware
  linux-headers
  lolcat
  man-db
  man-pages
  mesa lib32-mesa
  mlocate
  neofetch
  networkmanager
  noto-fonts-emoji
  nss-mdns
  p7zip
  pacman-contrib
  pavucontrol
  pipewire
  ps_mem
  pulseaudio-alsa
  pulseaudio-bluetooth
  reflector
  screenfetch
  sl
  soundfont-fluid
  systemd-sysvcompat
  tree
  ttf-dejavu
  ttf-liberation
  unrar
  unzip
  vi
  wget
  wtf
  xchm
  xclip
  xdg-user-dirs
  xorg-apps
  xorg-server
  xorg-xinit
  zip


# Needed
# Utils
wget
curl
tree
grep
ripgrep
openssh
sshfs
tldr
aha
make
cmake
automake
autoconf
bash-completion
htop
stow
neofetch
lsb-release
v4l2loopback-dkms
v4l2loopback-utils
# Tools
tmux
net-tools
npm
ninja
flatpak
# Editors
nano
neovim
# Other file systems
dosfstools
exfat-utils
ntfs-3g
mtpfs
gvfs-mtp
# Archive tools
unrar
unzip
zip
gzip
bzip2
# 'New' tools
lsd
btop
bat
# Fun
cmatrix
figlet
cowsay
# File explorer
vifm




if yesno "${TOUCHPAD_MSG}" "${YES}" "${NO}" --defaultno; then
    BASE_PACKAGES+='xf86-input-libinput '
    log "* Added touchpad support"
  fi
  if yesno "${OS_PROBER_MSG}" "${YES}" "${NO}" --defaultno; then
    BASE_PACKAGES+='os-prober '
    log "* Added OS prober"
  fi
  if "${UEFI}"; then
    BASE_PACKAGES+='efibootmgr '
    log "* Added EFI boot manager"
  fi
  if "${BTRFS_ROOT}"; then
    BASE_PACKAGES+='grub-btrfs '
    log "* Added GRUB Btrfs snapshot support"
  fi



QEMU = spice-vdagent qemu-guest-agent
VMWARE = xf86-video-vmware xf86-input-vmmouse 



# GRUB config
  mkdir -p /mnt"${grub_theme}"
  cp -rT "${extra}"/grub /mnt"${grub_theme}"
  if mount | grep -q ' /mnt/boot type [^b]' ||
      (! mount | grep -q ' /mnt/boot ' && ! "${BTRFS_ROOT}"); then
    sed -i 's/GRUB_DEFAULT=0/GRUB_DEFAULT=saved/' "${grub}"
    sed -i 's/#GRUB_SAVEDEFAULT/GRUB_SAVEDEFAULT/' "${grub}"
  fi
  sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=3/' "${grub}"
  sed -i "s/GRUB_GFXM.*/GRUB_GFXMODE=1920x1080,1366x768,auto/" "${grub}"
  sed -i "s:#GRUB_COLOR_N.*:GRUB_COLOR_NORMAL=\"red/black\":" "${grub}"
  sed -i "s:#GRUB_COLOR_H.*:GRUB_COLOR_HIGHLIGHT=\"yellow/black\":" "${grub}"
  sed -i "s:#GRUB_THEME.*:GRUB_THEME=\"${grub_theme}/theme.txt\":" "${grub}"
  if "${SYSTEM_AUTO_ENCRYPTED}"; then
    sed -i "s!quiet!cryptdevice=/dev/lvm/lvroot:root:allow-discards \
root=/dev/mapper/root transparent_hugepage=never!" "${grub}"
  else
    sed -i 's/quiet/transparent_hugepage=never/' "${grub}"
  fi
  if grep -q 'nvidia' <<<"${BASE_PACKAGES}"; then
    sed -i '/GRUB_CMDLINE_LINUX_DEFAULT=/s/.$/ nvidia-drm.modeset=1"/;s/" /"/' \
      "${grub}"



echo -e "Section \"InputClass\"\nIdentifier \"system-keyboard\"\n\
MatchIsKeyboard \"on\"\nOption \"XkbLayout\" \"${KEYMAP}\"\nEndSection" \
    >/mnt/etc/X11/xorg.conf.d/00-keyboard.conf

if [[ "${DESKTOP_ENV}" == 'kde-plasma' ]]; then
    mkdir /mnt/etc/sddm.conf.d
    echo -e "[Autologin]\nRelogin=false\nSession=\nUser=\n\n[General]\n\
HaltCommand=/usr/bin/systemctl poweroff\nRebootCommand=/usr/bin/systemctl \
reboot\n\n[Theme]\nCurrent=breeze\n\n[Users]\nMaximumUid=60513\n\
MinimumUid=1000" >/mnt/etc/sddm.conf.d/kde_settings.conf



  cp /mnt/etc/skel/.face /mnt/var/lib/AccountsService/icons/"${USERNAME}"
  echo -e "[User]\nIcon=/var/lib/AccountsService/icons/${USERNAME}
SystemAccount=false" >/mnt/var/lib/AccountsService/users/"${USERNAME}"

  log "User added: ${USERNAME}"
}


# Remove no password sudo rights
sed -i 's/^%wheel ALL=(ALL) NOPASSWD: ALL/# %wheel ALL=(ALL) NOPASSWD: ALL/' /etc/sudoers
sed -i 's/^%wheel ALL=(ALL:ALL) NOPASSWD: ALL/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /etc/sudoers
# Add sudo rights
sed -i 's/^# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /etc/sudoers
sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers


# check internet
ping -c 1 archlinux.org &>/dev/null
if [ $? -eq 1 ]; then
  red "[-] Internet not connected"
exit 1
fi

# format using fdisk
  fdisk ${DISK_PATH} <<-EOF
	g
	p
	n
	1

	+512M
	n
	2

	+${SWAP_MEM}
	n
	3


	t
	1
	1
	t
	2
	19
	p
	w
EOF


sgdisk -Z ${DISK} # zap all on disk
sgdisk -a 2048 -o ${DISK} # new gpt disk 2048 alignment

# create partitions
sgdisk -n 1::+1M --typecode=1:ef02 --change-name=1:'BIOSBOOT' ${DISK} # partition 1 (BIOS Boot Partition)
sgdisk -n 2::+300M --typecode=2:ef00 --change-name=2:'EFIBOOT' ${DISK} # partition 2 (UEFI Boot Partition)
sgdisk -n 3::-0 --typecode=3:8300 --change-name=3:'ROOT' ${DISK} # partition 3 (Root), default start, remaining
if [[ ! -d "/sys/firmware/efi" ]]; then # Checking for bios system
    sgdisk -A 1:set:2 ${DISK}
fi
partprobe ${DISK} # reread partition table to ensure it is correct



nc=$(grep -c ^processor /proc/cpuinfo)
echo -ne "
-------------------------------------------------------------------------
                    You have " $nc" cores. And
			changing the makeflags for "$nc" cores. Aswell as
				changing the compression settings.
-------------------------------------------------------------------------
"
TOTAL_MEM=$(cat /proc/meminfo | grep -i 'memtotal' | grep -o '[[:digit:]]*')
if [[  $TOTAL_MEM -gt 8000000 ]]; then
sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$nc\"/g" /etc/makepkg.conf
sed -i "s/COMPRESSXZ=(xz -c -z -)/COMPRESSXZ=(xz -c -T $nc -z -)/g" /etc/makepkg.conf
fi



# set kernel parameter for adding splash screen
sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& splash /' /etc/default/grub



PLYMOUTH_THEMES_DIR="$HOME/ArchTitus/configs/usr/share/plymouth/themes"
PLYMOUTH_THEME="arch-glow" # can grab from config later if we allow selection
mkdir -p /usr/share/plymouth/themes
echo 'Installing Plymouth theme...'
cp -rf ${PLYMOUTH_THEMES_DIR}/${PLYMOUTH_THEME} /usr/share/plymouth/themes
if  [[ $FS == "luks"]]; then
  sed -i 's/HOOKS=(base udev*/& plymouth/' /etc/mkinitcpio.conf # add plymouth after base udev
  sed -i 's/HOOKS=(base udev \(.*block\) /&plymouth-/' /etc/mkinitcpio.conf # create plymouth-encrypt after block hook
else
  sed -i 's/HOOKS=(base udev*/& plymouth/' /etc/mkinitcpio.conf # add plymouth after base udev
fi
plymouth-set-default-theme -R arch-glow # sets the theme and runs mkinitcpio
echo 'Plymouth theme installed'

disk_select () {
    PS3="SELECT DISK : "
    echo -e "\e[1;35m"
    select ENTRY in $(lsblk -dpnoNAME|grep -P "/dev/sd|nvme|vd|sr");
    do
        DISK=$ENTRY
        echo "Installing Arch Linux on $DISK."
        break
    done
}

kernel_selector () {
    echo "List of kernels:"
    echo "1) Stable — Vanilla Linux kernel and modules, with a few patches applied."
    echo "2) Hardened — A security-focused Linux kernel."
    echo "3) Longterm — Long-term support (LTS) Linux kernel and modules."
    echo "4) Zen Kernel — Optimized for desktop usage."
    read -r -p "Insert the number of the corresponding kernel: " choice
    echo "$choice will be installed"
    case $choice in
        1 ) kernel=linux
            ;;
        2 ) kernel=linux-hardened
            ;;
        3 ) kernel=linux-lts
            ;;
        4 ) kernel=linux-zen
            ;;
        * ) echo "You did not enter a valid selection."
            kernel_selector
    esac
}






reflector -a 48 -c $iso -f 5 -l 20 --sort rate --save /etc/pacman.d/mirrorlist
reflector --latest 10 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
reflector --latest 20 --age 24 --sort rate --protocol https --country $REFLECTOR_COUNTRY --save /etc/pacman.d/mirrorlist


useradd -m users -G wheel,audio,video -s /bin/bash $username
ESP="/dev/$(lsblk $DISK -o NAME,PARTLABEL | grep ESP| cut -d " " -f1 | cut -c7-)"


set_boot() {
	if [ "$BOOTLOADER" = "grub" ]; then
		pacman -S --noconfirm grub
		if [ "$BOOT_TYPE" = "efi" ]; then
			pacman -S --noconfirm efibootmgr
			grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB_ARCH --removable
		elif [ "$BOOT_TYPE" = "legacy" ]; then
			grub-install --target=i386-pc "$DRIVE"
		fi
		grub-mkconfig -o /boot/grub/grub.cfg
		echo "Disabling osprober"
		echo " " >> /etc/default/grub
		echo "# Disable osprober" >> /etc/default/grub
		echo "GRUB_DISABLE_OS_PROBER=true" >> /etc/default/grub
		grub-mkconfig -o /boot/grub/grub.cfg



install_aur_helper() {
	if [ "$AUR_HELPER" = "yay" ]; then
		git clone https://aur.archlinux.org/yay-bin.git /yay
		cd /yay
		chown $USER_NAME:$USER_NAME /yay
		sudo -u $USER_NAME makepkg -si --noconfirm
		cd /
		rm -rf /yay
	elif [ "$AUR_HELPER" = "paru" ]; then
		git clone https://aur.archlinux.org/paru-bin.git /paru
		cd /paru
		chown $USER_NAME:$USER_NAME /paru
		sudo -u $USER_NAME makepkg -si --noconfirm
		cd /
		rm -rf /paru
		cat >/etc/paru.conf <<EOF
#
# $PARU_CONF
# /etc/paru.conf
# ~/.config/paru/paru.conf
#
# See the paru.conf(5) manpage for options

#
# GENERAL OPTIONS
#
[options]
PgpFetch
Devel
Provides
DevelSuffixes = -git -cvs -svn -bzr -darcs -always
#BottomUp
RemoveMake
SudoLoop
UseAsk
#CombinedUpgrade
CleanAfter
UpgradeMenu
#NewsOnUpgrade
SkipReview

#LocalRepo
#Chroot
#Sign
#SignDb

#
# Binary OPTIONS
#
#[bin]
#FileManager = vifm
#MFlags = --skippgpcheck
#Sudo = doas
EOF
	fi
}


arch_chroot() {
	cp "$0" /mnt/setup.sh
	cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
	arch-chroot /mnt bash -c "./setup.sh chroot $BOOT_TYPE"

	if [ -f /mnt/setup.sh ]; then
		echo 'ERROR: Something failed inside the chroot, not unmounting filesystems so you can investigate.'
		echo 'Make sure you unmount everything before you try to run this script again.'
	else
		echo 'Unmounting filesystems'
		unmount_filesystems
		echo 'DONE!'
		echo 'Reboot the system.'
	fi

}

set_sudoers() {
	cat >/etc/sudoers <<EOF
# /etc/sudoers
#
# This file MUST be edited with the 'visudo' command as root.
#
# See the man page for details on how to write a sudoers file.
#

Defaults env_reset
Defaults pwfeedback
Defaults passwd_timeout=0
Defaults lecture="never"
#Defaults editor=/usr/bin/micro
Defaults insults

root   ALL=(ALL) ALL
%wheel ALL=(ALL) ALL
EOF
}

	pacman -S --needed --noconfirm grub efibootmgr
	grub-install --target=x86_64-efi --efi-directory=/boot/ --bootloader-id=GRUB --removable
	sed -i '/^GRUB_TIMEOUT=/s/5/0/g' /etc/default/grub
	sed -i '/^GRUB_TIMEOUT_STYLE=/s/menu/countdown/g' /etc/default/grub
	sed -i '/^GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ usbcore.autosuspend=-1 btusb.enable_autosuspend=0"/' /etc/default/grub
	sed -i 's/#HandlePowerKey=poweroff/HandlePowerKey=suspend/' /etc/systemd/logind.conf
	grub-mkconfig -o /boot/grub/grub.cfg






cat >> /etc/NetworkManager/conf.d/wifi-rand-mac.conf <<-EOF
	[device-mac-randomization]
	wifi.scan-rand-mac-address=yes

	[connection-mac-randomization]
	ethernet.cloned-mac-address=random
	wifi.cloned-mac-address=stable
EOF

	cat >> /etc/modprobe.d/nobeep.conf <<-EOF
	blacklist pcspkr
	blacklist snd_pcsp
EOF

disable_pc_speaker() {
	echo "blacklist pcspkr" >>/etc/modprobe.d/nobeep.conf
}

check_connection() {
  if ! nc -zw1 archlinux.org 443; then
    echo "ERROR: No internet connection. Check your internet connection and try again."
    exit 1
  fi
}

wait_for_any_key_press ()
{
    echo -ne "Waiting for any key to be pressed..."
	read -n 1 -s -r -p "$1"
	echo
}


set_password() {
    read -rs -p "Please enter password: " PASSWORD1
    echo -ne "\n"
    read -rs -p "Please re-enter password: " PASSWORD2
    echo -ne "\n"
    if [[ "$PASSWORD1" == "$PASSWORD2" ]]; then
        set_option "$1" "$PASSWORD1"
    else
        echo -ne "ERROR! Passwords do not match. \n"
        set_password
    fi
}

root_check() {
    if [[ "$(id -u)" != "0" ]]; then
        echo -ne "ERROR! This script must be run under the 'root' user!\n"
        exit 0
    fi
}

arch_check() {
    if [[ ! -e /etc/arch-release ]]; then
        echo -ne "ERROR! This script must be run in Arch Linux!\n"
        exit 0
    fi
}


function config_arch()
{
  echo
  read -p "Enter a new user name: " -e USER_NAME

  arch-chroot /mnt <<-REALEND
	curl -s https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc \
	| pacman-key --add -
	pacman-key --finger 56C464BAAC421453
	pacman-key --lsign-key 56C464BAAC421453

	passwd <<-EOF
	root
	root
EOF

	useradd -m -G users,wheel -s /bin/bash ${USER_NAME}
	passwd ${USER_NAME} <<-EOF
	${USER_NAME}
	${USER_NAME}
EOF

	pacman -S --needed --noconfirm sudo vim
	sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/g' /etc/sudoers
	ln -s /usr/bin/vim /usr/bin/vi
REALEND
}














# Essential packages
BASE_PACKAGES=('base' 'base-devel' 'iwd' 'linux' 'linux-firmware' 'grub' 'networkmanager')
BASE_ESSENTIALS=('man-db' 'man-pages' 'texinfo' 'nano')
# Packages that will be installed whenever a GUI is installed
DESKTOP_DEFAULTS=('gvfs'  'pavucontrol' 'pulseaudio' 'pulseaudio-alsa' 'ttf-dejavu' 'xdg-user-dirs' 'xf86-input-libinput' 'xorg-apps' 'xorg-server' 'xterm')

noto-fonts noto-fonts-emoji ttf-dejavu ttf-hack ttf-droid ttf-ubuntu-font-family

reflector htop rfkill sudo unrar unzip wget zip xdg-user-dirs exa fish git pacman-contrib bc



sgdisk --zap-all "$DISK" &> /dev/null
wipefs -a "$DISK" &> /dev/null












# PACKAGES
blueman
bluez
bluez-utils

nautilus
swaync  
galculator
sublime text 4
ms vscode 
evince
mpv
imv + restro
gnome-disk-utility
g4music
onlyoffice 7.2


Arc Theme
Brave





# TO-DO LIST :
~~~~~~~~~~~~~~
# AUTO DETECT DISKS : lsblk -dno NAME | grep -v sr0
